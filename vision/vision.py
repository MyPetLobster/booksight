import time

import cv2 as cv 
import easyocr
import numpy as np

from dotenv import load_dotenv
from openai import OpenAI


load_dotenv()
client = OpenAI()


GPT_MODEL = "gpt-3.5-turbo"
GPT_TEMP = 0.3




def main():
    start = time.time()
    text = detect_text("vision/test_images/two_books_red.jpeg")
    print(f"TEXT: \n {text}")
    print(f"detect_text took {time.time() - start:.2f} seconds\n\n")
    now = time.time()

    words = identify_words(text)
    print(f"WORDS: \n {words}")
    print(f"identify_words took {time.time() - now:.2f} seconds\n\n")
    now = time.time()

    book_info = identify_book_info(words)
    print(f"BOOK INFO: \n {book_info}")
    print(f"identify_book_info took {time.time() - now:.2f} seconds\n\n")

    print(f"Total Time Taken: {time.time() - start:.2f} seconds")
    



def detect_text(jpeg_file):
    new_img = preprocess_image(jpeg_file)
    text_as_string = ""

    reader = easyocr.Reader(['en'], gpu=True)

    # Rotate the image by 90, 180, and 270 degrees, and read the text in each rotated image.
    img_90 = cv.rotate(new_img, cv.ROTATE_90_CLOCKWISE)
    img_180 = cv.rotate(new_img, cv.ROTATE_180)
    img_270 = cv.rotate(new_img, cv.ROTATE_90_COUNTERCLOCKWISE)

    results = {}

    results["original"] = reader.readtext(new_img)
    results["180"] = reader.readtext(img_180)
    results["90"] = reader.readtext(img_90)
    results["270"] = reader.readtext(img_270)

    for orientation, result in results.items():
        if len(result) > 1:
            for i in range (len(result)):
                text_as_string += result[i][1].replace(" ", "") + " "
        
    return text_as_string


def preprocess_image(jpeg_file):
    img = cv.imread(jpeg_file)
    resize_img = cv.resize(img, (0, 0), fx=0.7, fy=0.7)
    gray_img = cv.cvtColor(resize_img, cv.COLOR_BGR2GRAY)

    # (Contrast Limited Adaptive Histogram Equalization) 
    clahe = cv.createCLAHE(clipLimit=4, tileGridSize=(8, 8))
    clahe_img = clahe.apply(gray_img)

    # Increase the contrast of the image and decrease the brightness.
    new_img = np.zeros(clahe_img.shape, clahe_img.dtype)
    alpha, beta = 1.8, -50
    new_img = cv.convertScaleAbs(clahe_img, alpha=alpha, beta=beta)

    return new_img







def identify_words(text):
    language = "English"
    messages = [
        {"role": "system", "content": f"""You are an expert at identifying words in text. You will be provided with a string of text 
            generated by EasyOCR. The text will be read off of the spine of books. Some of the text will be gibberish, but some text 
            might contain information about books. Your goal is not to identify these books, but rather to identify all the {language}
            words in the text. There will be misspellings and spacing errors, so you will need to be creative in identifying words. 

            You must respond with a comma-separated list with all the words you can identify in the text. If you come across a group
            of words that is an identifiable name, phrase, title, etc, please group those words together and add them to the list as
            a single item. 

            Once you have completed the task and identified all of the words. Go back to the beginning and repeat the task blindly, then
            compare the two lists to ensure you have not missed any words. If you are confident you have identified all the words and made
            all the correct groupings, you may submit your response.

            Here is the text for you to analyze: """ + text
        }
    ]

    response = client.chat.completions.create(
        model=GPT_MODEL,
        messages=messages,
        temperature=GPT_TEMP,
        max_tokens=1000,
    )

    return response.choices[0].message.content



def identify_book_info(text):
    # Use OpenAI to identify the book information.
    language = "English"
    messages = [
        {"role": "system", "content": f"""You know everything there is to know about every book in existence. You will be provided with a
            comma-separated list of {language} words that have been read off the spine of books. Your goal is to identify all the books in the text. 
            You must identify the title and author of each book, as well as any other information you can deduce. Some of the words 
            may be from stickers on the spine indicating an award, or perhaps the publisher's information was included on the spine. This information 
            may not be in the same order as title and author. For example you might find an author name at the end of the string, but its 
            publisher name might have been at the beginning, and there may be information about other books in between. There may be spelling errors, so
            do your best to figure out what the correct information is. Fix all spelling errors in your response.

            Once you have identified all the books in the text, format your response as JSON object with a list of books. Each book
            should include the following properties: title, author, publisher, publication_date, ISBN, other_info. 

            If you are unable to identify any books in the text, please format your response as a JSON object with an empty list.

            IMPORTANT: After you complete your task once, go back to the beginning and repeat the task. Compare the two lists to ensure you have not missed
            any books. There may be books that are more difficult to identify, so you may need to be creative in your analysis of the provided 
            text. For every correct ISBN you identify, you will receive another bit of my undying gratitude.

            Here is the text for you to analyze, delimited by three backticks: 
            
            ```{text}```

            """
        }
    ]

    response = client.chat.completions.create(
        model=GPT_MODEL,
        messages=messages,
        temperature=GPT_TEMP,
        max_tokens=1000,
    )

    return response.choices[0].message.content
    

## Dev functions
def show_image(img):
    cv.imshow('image', img)
    cv.waitKey(0)
    cv.destroyAllWindows()












if __name__ == "__main__":
    main()

